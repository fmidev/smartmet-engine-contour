#include "SavitzkyGolay2D.h"
#include "MirrorGrid.h"
#include <array>
#include <cmath>
#include <stdexcept>
#include <vector>

namespace SmartMet
{
namespace Engine
{
namespace Contour
{
namespace SavitzkyGolay2D
{
namespace
{
/*
 * Source:
 *
 * http://research.microsoft.com/en-us/um/people/jckrumm/savgol/savgol.htm
 *
 * Since the original matrix coefficients are rational, so are those
 * in the pseudoinverse. Hence a little program was made to convert
 * the original floating point coefficients into rational form.
 */

const int d_3_1 = 9;
const std::array<int, 9> c_3_1{1, 1, 1, 1, 1, 1, 1, 1, 1};

const int d_3_2 = 9;
const std::array<int, 9> c_3_2{-1, 2, -1, 2, 5, 2, -1, 2, -1};

const int d_5_1 = 25;
const std::array<int, 25> c_5_1{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int d_5_2 = 175;
const std::array<int, 25> c_5_2{-13, 2, 7, 2,  -13, 2,  17, 22,  17, 2, 7, 22, 27,
                                22,  7, 2, 17, 22,  17, 2,  -13, 2,  7, 2, -13};

const int d_5_3 = 175;
const std::array<int, 25> c_5_3{-13, 2, 7, 2,  -13, 2,  17, 22,  17, 2, 7, 22, 27,
                                22,  7, 2, 17, 22,  17, 2,  -13, 2,  7, 2, -13};

const int d_5_4 = 1225;
const std::array<int, 25> c_5_4{51,  -99, 96,  -99, 51,  -99, -24, 246, -24, -99, 96,  246, 541,
                                246, 96,  -99, -24, 246, -24, -99, 51,  -99, 96,  -99, 51};

const int d_5_5 = 1225;
const std::array<int, 25> c_5_5{51,  -99, 96,  -99, 51,  -99, -24, 246, -24, -99, 96,  246, 541,
                                246, 96,  -99, -24, 246, -24, -99, 51,  -99, 96,  -99, 51};

const int d_7_1 = 49;
const std::array<int, 49> c_7_1{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int d_7_2 = 147;
const std::array<int, 49> c_7_2{-7, -2, 1, 2, 1, -2, -7, -2, 3,  6,  7, 6, 3, -2, 1,  6, 9,
                                10, 9,  6, 1, 2, 7,  10, 11, 10, 7,  2, 1, 6, 9,  10, 9, 6,
                                1,  -2, 3, 6, 7, 6,  3,  -2, -7, -2, 1, 2, 1, -2, -7};

const int d_7_3 = 147;
const std::array<int, 49> c_7_3{-7, -2, 1, 2, 1, -2, -7, -2, 3,  6,  7, 6, 3, -2, 1,  6, 9,
                                10, 9,  6, 1, 2, 7,  10, 11, 10, 7,  2, 1, 6, 9,  10, 9, 6,
                                1,  -2, 3, 6, 7, 6,  3,  -2, -7, -2, 1, 2, 1, -2, -7};

const int d_7_4 = 4851;
const std::array<int, 49> c_7_4{
    206, -174, -24,  89,  -24, -174, 206,  -174, -279, 36,   204, 36,  -279, -174, -24, 36,  450,
    651, 450,  36,   -24, 89,  204,  651,  863,  651,  204,  89,  -24, 36,   450,  651, 450, 36,
    -24, -174, -279, 36,  204, 36,   -279, -174, 206,  -174, -24, 89,  -24,  -174, 206};

const int d_7_5 = 4851;
const std::array<int, 49> c_7_5{
    206, -174, -24,  89,  -24, -174, 206,  -174, -279, 36,   204, 36,  -279, -174, -24, 36,  450,
    651, 450,  36,   -24, 89,  204,  651,  863,  651,  204,  89,  -24, 36,   450,  651, 450, 36,
    -24, -174, -279, 36,  204, 36,   -279, -174, 206,  -174, -24, 89,  -24,  -174, 206};

const int d_9_1 = 81;
const std::array<int, 81> c_9_1{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int d_9_2 = 6237;
const std::array<int, 81> c_9_2{
    -203, -98, -23, 22,  37,   22,  -23, -98, -203, -98, 7,   82,  127, 142, 127, 82,  7,
    -98,  -23, 82,  157, 202,  217, 202, 157, 82,   -23, 22,  127, 202, 247, 262, 247, 202,
    127,  22,  37,  142, 217,  262, 277, 262, 217,  142, 37,  22,  127, 202, 247, 262, 247,
    202,  127, 22,  -23, 82,   157, 202, 217, 202,  157, 82,  -23, -98, 7,   82,  127, 142,
    127,  82,  7,   -98, -203, -98, -23, 22,  37,   22,  -23, -98, -203};

const int d_9_3 = 6237;
const std::array<int, 81> c_9_3{
    -203, -98, -23, 22,  37,   22,  -23, -98, -203, -98, 7,   82,  127, 142, 127, 82,  7,
    -98,  -23, 82,  157, 202,  217, 202, 157, 82,   -23, 22,  127, 202, 247, 262, 247, 202,
    127,  22,  37,  142, 217,  262, 277, 262, 217,  142, 37,  22,  127, 202, 247, 262, 247,
    202,  127, 22,  -23, 82,   157, 202, 217, 202,  157, 82,  -23, -98, 7,   82,  127, 142,
    127,  82,  7,   -98, -203, -98, -23, 22,  37,   22,  -23, -98, -203};

const int d_9_4 = 33033;
const std::array<int, 81> c_9_4{
    1197,  -413, -408,  57,   289,  57,   -408, -413, 1197,  -413, -1265, -718, 72,   412,
    72,    -718, -1265, -413, -408, -718, 216,  1238, 1655,  1238, 216,   -718, -408, 57,
    72,    1238, 2399,  2863, 2399, 1238, 72,   57,   289,   412,  1655,  2863, 3343, 2863,
    1655,  412,  289,   57,   72,   1238, 2399, 2863, 2399,  1238, 72,    57,   -408, -718,
    216,   1238, 1655,  1238, 216,  -718, -408, -413, -1265, -718, 72,    412,  72,   -718,
    -1265, -413, 1197,  -413, -408, 57,   289,  57,   -408,  -413, 1197};

const int d_9_5 = 33033;
const std::array<int, 81> c_9_5{
    1197,  -413, -408,  57,   289,  57,   -408, -413, 1197,  -413, -1265, -718, 72,   412,
    72,    -718, -1265, -413, -408, -718, 216,  1238, 1655,  1238, 216,   -718, -408, 57,
    72,    1238, 2399,  2863, 2399, 1238, 72,   57,   289,   412,  1655,  2863, 3343, 2863,
    1655,  412,  289,   57,   72,   1238, 2399, 2863, 2399,  1238, 72,    57,   -408, -718,
    216,   1238, 1655,  1238, 216,  -718, -408, -413, -1265, -718, 72,    412,  72,   -718,
    -1265, -413, 1197,  -413, -408, 57,   289,  57,   -408,  -413, 1197};

const int d_11_1 = 121;
const std::array<int, 121> c_11_1{
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int d_11_2 = 4719;
const std::array<int, 121> c_11_2{
    -111, -66, -31,  -6,  9,   14,  9,   -6,  -31, -66, -111, -66, -21, 14,  39,  54,  59,  54,
    39,   14,  -21,  -66, -31, 14,  49,  74,  89,  94,  89,   74,  49,  14,  -31, -6,  39,  74,
    99,   114, 119,  114, 99,  74,  39,  -6,  9,   54,  89,   114, 129, 134, 129, 114, 89,  54,
    9,    14,  59,   94,  119, 134, 139, 134, 119, 94,  59,   14,  9,   54,  89,  114, 129, 134,
    129,  114, 89,   54,  9,   -6,  39,  74,  99,  114, 119,  114, 99,  74,  39,  -6,  -31, 14,
    49,   74,  89,   94,  89,  74,  49,  14,  -31, -66, -21,  14,  39,  54,  59,  54,  39,  14,
    -21,  -66, -111, -66, -31, -6,  9,   14,  9,   -6,  -31,  -66, -111};

const int d_11_3 = 4719;
const std::array<int, 121> c_11_3{
    -111, -66, -31,  -6,  9,   14,  9,   -6,  -31, -66, -111, -66, -21, 14,  39,  54,  59,  54,
    39,   14,  -21,  -66, -31, 14,  49,  74,  89,  94,  89,   74,  49,  14,  -31, -6,  39,  74,
    99,   114, 119,  114, 99,  74,  39,  -6,  9,   54,  89,   114, 129, 134, 129, 114, 89,  54,
    9,    14,  59,   94,  119, 134, 139, 134, 119, 94,  59,   14,  9,   54,  89,  114, 129, 134,
    129,  114, 89,   54,  9,   -6,  39,  74,  99,  114, 119,  114, 99,  74,  39,  -6,  -31, 14,
    49,   74,  89,   94,  89,  74,  49,  14,  -31, -66, -21,  14,  39,  54,  59,  54,  39,  14,
    -21,  -66, -111, -66, -31, -6,  9,   14,  9,   -6,  -31,  -66, -111};

const int d_11_4 = 20449;
const std::array<int, 121> c_11_4{
    612,  -36,  -176, -81,  54,   112,  54,   -81,  -176, -36,  612,  -36,  -459, -424, -204, 6,
    89,   6,    -204, -424, -459, -36,  -176, -424, -253, 64,   333,  435,  333,  64,   -253, -424,
    -176, -81,  -204, 64,   451,  761,  877,  761,  451,  64,   -204, -81,  54,   6,    333,  761,
    1096, 1221, 1096, 761,  333,  6,    54,   112,  89,   435,  877,  1221, 1348, 1221, 877,  435,
    89,   112,  54,   6,    333,  761,  1096, 1221, 1096, 761,  333,  6,    54,   -81,  -204, 64,
    451,  761,  877,  761,  451,  64,   -204, -81,  -176, -424, -253, 64,   333,  435,  333,  64,
    -253, -424, -176, -36,  -459, -424, -204, 6,    89,   6,    -204, -424, -459, -36,  612,  -36,
    -176, -81,  54,   112,  54,   -81,  -176, -36,  612};

const int d_11_5 = 20449;
const std::array<int, 121> c_11_5{
    612,  -36,  -176, -81,  54,   112,  54,   -81,  -176, -36,  612,  -36,  -459, -424, -204, 6,
    89,   6,    -204, -424, -459, -36,  -176, -424, -253, 64,   333,  435,  333,  64,   -253, -424,
    -176, -81,  -204, 64,   451,  761,  877,  761,  451,  64,   -204, -81,  54,   6,    333,  761,
    1096, 1221, 1096, 761,  333,  6,    54,   112,  89,   435,  877,  1221, 1348, 1221, 877,  435,
    89,   112,  54,   6,    333,  761,  1096, 1221, 1096, 761,  333,  6,    54,   -81,  -204, 64,
    451,  761,  877,  761,  451,  64,   -204, -81,  -176, -424, -253, 64,   333,  435,  333,  64,
    -253, -424, -176, -36,  -459, -424, -204, 6,    89,   6,    -204, -424, -459, -36,  612,  -36,
    -176, -81,  54,   112,  54,   -81,  -176, -36,  612};

const int d_13_1 = 169;
const std::array<int, 169> c_13_1{
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int d_13_2 = 1859;
const std::array<int, 169> c_13_2{
    -33, -22, -13, -6,  -1,  2,   3,   2,   -1, -6,  -13, -22, -33, -22, -11, -2,  5,   10, 13,
    14,  13,  10,  5,   -2,  -11, -22, -13, -2, 7,   14,  19,  22,  23,  22,  19,  14,  7,  -2,
    -13, -6,  5,   14,  21,  26,  29,  30,  29, 26,  21,  14,  5,   -6,  -1,  10,  19,  26, 31,
    34,  35,  34,  31,  26,  19,  10,  -1,  2,  13,  22,  29,  34,  37,  38,  37,  34,  29, 22,
    13,  2,   3,   14,  23,  30,  35,  38,  39, 38,  35,  30,  23,  14,  3,   2,   13,  22, 29,
    34,  37,  38,  37,  34,  29,  22,  13,  2,  -1,  10,  19,  26,  31,  34,  35,  34,  31, 26,
    19,  10,  -1,  -6,  5,   14,  21,  26,  29, 30,  29,  26,  21,  14,  5,   -6,  -13, -2, 7,
    14,  19,  22,  23,  22,  19,  14,  7,   -2, -13, -22, -11, -2,  5,   10,  13,  14,  13, 10,
    5,   -2,  -11, -22, -33, -22, -13, -6,  -1, 2,   3,   2,   -1,  -6,  -13, -22, -33};

const int d_13_3 = 1859;
const std::array<int, 169> c_13_3{
    -33, -22, -13, -6,  -1,  2,   3,   2,   -1, -6,  -13, -22, -33, -22, -11, -2,  5,   10, 13,
    14,  13,  10,  5,   -2,  -11, -22, -13, -2, 7,   14,  19,  22,  23,  22,  19,  14,  7,  -2,
    -13, -6,  5,   14,  21,  26,  29,  30,  29, 26,  21,  14,  5,   -6,  -1,  10,  19,  26, 31,
    34,  35,  34,  31,  26,  19,  10,  -1,  2,  13,  22,  29,  34,  37,  38,  37,  34,  29, 22,
    13,  2,   3,   14,  23,  30,  35,  38,  39, 38,  35,  30,  23,  14,  3,   2,   13,  22, 29,
    34,  37,  38,  37,  34,  29,  22,  13,  2,  -1,  10,  19,  26,  31,  34,  35,  34,  31, 26,
    19,  10,  -1,  -6,  5,   14,  21,  26,  29, 30,  29,  26,  21,  14,  5,   -6,  -13, -2, 7,
    14,  19,  22,  23,  22,  19,  14,  7,   -2, -13, -22, -11, -2,  5,   10,  13,  14,  13, 10,
    5,   -2,  -11, -22, -33, -22, -13, -6,  -1, 2,   3,   2,   -1,  -6,  -13, -22, -33};

const int d_13_4 = 31603;
const std::array<int, 169> c_13_4{
    781,  99,   -144, -137, -27,  81,   124,  81,   -27,  -137, -144, 99,   781,  99,   -396, -486,
    -360, -165, -6,   54,   -6,   -165, -360, -486, -396, 99,   -144, -486, -451, -227, 37,   238,
    312,  238,  37,   -227, -451, -486, -144, -137, -360, -227, 72,   390,  623,  708,  623,  390,
    72,   -227, -360, -137, -27,  -165, 37,   390,  748,  1004, 1096, 1004, 748,  390,  37,   -165,
    -27,  81,   -6,   238,  623,  1004, 1274, 1371, 1274, 1004, 623,  238,  -6,   81,   124,  54,
    312,  708,  1096, 1371, 1470, 1371, 1096, 708,  312,  54,   124,  81,   -6,   238,  623,  1004,
    1274, 1371, 1274, 1004, 623,  238,  -6,   81,   -27,  -165, 37,   390,  748,  1004, 1096, 1004,
    748,  390,  37,   -165, -27,  -137, -360, -227, 72,   390,  623,  708,  623,  390,  72,   -227,
    -360, -137, -144, -486, -451, -227, 37,   238,  312,  238,  37,   -227, -451, -486, -144, 99,
    -396, -486, -360, -165, -6,   54,   -6,   -165, -360, -486, -396, 99,   781,  99,   -144, -137,
    -27,  81,   124,  81,   -27,  -137, -144, 99,   781};

const int d_13_5 = 31603;
const std::array<int, 169> c_13_5{
    781,  99,   -144, -137, -27,  81,   124,  81,   -27,  -137, -144, 99,   781,  99,   -396, -486,
    -360, -165, -6,   54,   -6,   -165, -360, -486, -396, 99,   -144, -486, -451, -227, 37,   238,
    312,  238,  37,   -227, -451, -486, -144, -137, -360, -227, 72,   390,  623,  708,  623,  390,
    72,   -227, -360, -137, -27,  -165, 37,   390,  748,  1004, 1096, 1004, 748,  390,  37,   -165,
    -27,  81,   -6,   238,  623,  1004, 1274, 1371, 1274, 1004, 623,  238,  -6,   81,   124,  54,
    312,  708,  1096, 1371, 1470, 1371, 1096, 708,  312,  54,   124,  81,   -6,   238,  623,  1004,
    1274, 1371, 1274, 1004, 623,  238,  -6,   81,   -27,  -165, 37,   390,  748,  1004, 1096, 1004,
    748,  390,  37,   -165, -27,  -137, -360, -227, 72,   390,  623,  708,  623,  390,  72,   -227,
    -360, -137, -144, -486, -451, -227, 37,   238,  312,  238,  37,   -227, -451, -486, -144, 99,
    -396, -486, -360, -165, -6,   54,   -6,   -165, -360, -486, -396, 99,   781,  99,   -144, -137,
    -27,  81,   124,  81,   -27,  -137, -144, 99,   781};

const int denoms[6][5] = {{d_3_1, d_3_2, 0, 0, 0},
                          {d_5_1, d_5_2, d_5_3, d_5_4, d_5_5},
                          {d_7_1, d_7_2, d_7_3, d_7_4, d_7_5},
                          {d_9_1, d_9_2, d_9_3, d_9_4, d_9_5},
                          {d_11_1, d_11_2, d_11_3, d_11_4, d_11_5},
                          {d_13_1, d_13_2, d_13_3, d_13_4, d_13_5}};

const int* const coeffs[6][5] = {
    {c_3_1.data(), c_3_2.data(), nullptr, nullptr, nullptr},
    {c_5_1.data(), c_5_2.data(), c_5_3.data(), c_5_4.data(), c_5_5.data()},
    {c_7_1.data(), c_7_2.data(), c_7_3.data(), c_7_4.data(), c_7_5.data()},
    {c_9_1.data(), c_9_2.data(), c_9_3.data(), c_9_4.data(), c_9_5.data()},
    {c_11_1.data(), c_11_2.data(), c_11_3.data(), c_11_4.data(), c_11_5.data()},
    {c_13_1.data(), c_13_2.data(), c_13_3.data(), c_13_4.data(), c_13_5.data()}};

}  // namespace

void smooth(NormalGrid& input, std::size_t size, std::size_t degree)
{
  if (size == 0 || degree == 0)
    return;

  size = std::min(6UL, size);
  degree = std::min(5UL, degree);

  const int* factor = coeffs[size - 1][degree - 1];
  if (factor == nullptr)
    return;

  // Reflect data at the borders for better results
  MirrorGrid mirror(input);

  const int n = 2 * size + 1;

  const int denom = denoms[size - 1][degree - 1];

  // Process only the desired part, same algorithm as in Impl.cpp for contouring

  const auto bbox = input.bbox();
  const auto imin = bbox[0];
  const auto jmin = bbox[1];
  const auto imax = bbox[2] + 1;
  const auto jmax = bbox[3] + 1;

  if (imax < imin || jmax < jmin)
    return;

  const auto nx = imax - imin + 1;
  const auto ny = jmax - jmin + 1;

  // Determine whether we need to split rows into two parts due to shifted global data.

  const long shift = input.shift();
  const auto imid = shift - imin;
  const auto needs_two_passes = (shift != 0 && shift > imin && shift < imax);

  std::vector<long> loop_limits;
  if (!needs_two_passes)
    loop_limits = {imin, imax};
  else
    loop_limits = {imid, nx, 0, imid - 1};

  // Holder for temporary results
  std::vector<float> values;
  values.reserve(nx * ny);

  // First calculate smoothened values
  for (auto jj = jmin; jj <= jmax; jj++)
    for (auto k = 0UL; k < loop_limits.size(); k += 2)
      for (auto ii = loop_limits[k]; ii <= loop_limits[k + 1]; ii++)
      {
        if (std::isnan(input(ii, jj)))
          values.push_back(input(ii, jj));
        else
        {
          float sum = 0;
          int pos = 0;
          for (int j = 0; j < n; j++)
            for (int i = 0; i < n; i++)
              sum += (factor[pos++] * mirror(ii + i - size, jj + j - size));
          if (std::isnan(sum))
            values.push_back(input(ii, jj));  // accept only valid smoothed values
          else
            values.push_back(sum / denom);
        }
      }

  // Then replace old values with new ones
  auto in_pos = 0UL;
  for (auto jj = jmin; jj <= jmax; jj++)
    for (auto k = 0UL; k < loop_limits.size(); k += 2)
      for (auto ii = loop_limits[k]; ii <= loop_limits[k + 1]; ii++)
        input.set(ii, jj, values[in_pos++]);
}
}  // namespace SavitzkyGolay2D
}  // namespace Contour
}  // namespace Engine
}  // namespace SmartMet
